{
  "timestamp": "2025-10-03T08:58:38.223422",
  "model_key": "sonnet45",
  "model_name": "Claude Sonnet 4.5 (HERO)",
  "model_id": "anthropic/claude-sonnet-4-5-20250929",
  "model_description": "Excellence maximale (champion qualitÃ©)",
  "langgraph_url": "http://localhost:2024",
  "total_tests": 6,
  "successful_tests": 6,
  "failed_tests": 0,
  "statistics": {
    "average_time": 35.573288361231484,
    "min_time": 22.43027687072754,
    "max_time": 47.067513942718506,
    "average_minutes": 0.5928881393538581,
    "min_minutes": 0.373837947845459,
    "max_minutes": 0.7844585657119751,
    "average_response_length": 3311.1666666666665,
    "min_response_length": 1440,
    "max_response_length": 5734
  },
  "results": [
    {
      "question_id": "q1_trivial",
      "complexity": "trivial",
      "category": "API lookup",
      "question": "I need to save conversation history to PostgreSQL. Which class should I use?",
      "success": true,
      "elapsed_time": 22.43027687072754,
      "elapsed_minutes": 0.373837947845459,
      "start_time": "2025-10-03T08:54:52.777542",
      "end_time": "2025-10-03T08:55:15.207819",
      "response_full": "Based on the documentation, you should use the **`PostgresChatMessageHistory`** class to save conversation history to PostgreSQL.\n\nHere's what you need to know:\n\n**For Python:**\n- Use `PostgresChatMessageHistory` from `langchain_community.chat_message_histories` [(source)](https://python.langchain.com/docs/integrations/memory/postgres_chat_message_history/)\n- Basic setup:\n```python\nfrom langchain_community.chat_message_histories import PostgresChatMessageHistory\n\nhistory = PostgresChatMessageHistory(\n    connection_string=\"postgresql://postgres:mypassword@localhost/chat_history\",\n    session_id=\"foo\",\n)\n```\n\n**For JavaScript/TypeScript:**\n- Use `PostgresChatMessageHistory` from `@langchain/community` [(source)](https://js.langchain.com/docs/integrations/memory/postgres)\n- You'll need to install the `pg` package and pass either a pool instance or pool config [(source)](https://js.langchain.com/docs/integrations/memory/postgres)\n\n**If using Google Cloud SQL for PostgreSQL:**\n- Use `PostgresChatMessageHistory` from `langchain_google_cloud_sql_pg` [(source)](https://python.langchain.com/docs/integrations/memory/google_sql_pg/)\n- This requires creating a `PostgresEngine` connection pool first [(source)](https://python.langchain.com/docs/integrations/memory/google_sql_pg/)\n\nAll implementations require a `session_id` to identify individual chat sessions [(source)](https://js.langchain.com/docs/integrations/memory/postgres).",
      "response_length": 1440,
      "chunk_count": 38,
      "error": null
    },
    {
      "question_id": "q2_simple",
      "complexity": "simple",
      "category": "Configuration",
      "question": "How do I configure LangGraph to use my own OpenAI API key and custom temperature?",
      "success": true,
      "elapsed_time": 28.701646089553833,
      "elapsed_minutes": 0.47836076815923056,
      "start_time": "2025-10-03T08:55:17.208928",
      "end_time": "2025-10-03T08:55:45.910574",
      "response_full": "# Configuring LangGraph with Custom OpenAI API Key and Temperature\n\nYou can configure LangGraph to use your own OpenAI API key and custom temperature settings in several ways:\n\n## 1. **Environment Variables**\n\nSet your OpenAI API key as an environment variable in your LangGraph configuration file (`langgraph.json`):\n\n```json\n{\n  \"dependencies\": [\".\"],\n  \"graphs\": {\n    \"agent\": \"./agent.py:graph\"\n  },\n  \"env\": {\n    \"OPENAI_API_KEY\": \"your-api-key-here\"\n  }\n}\n```\n\nFor production deployments, you'll typically want to configure environment variables in your deployment environment rather than in the configuration file [(source)](https://docs.langchain.com/langgraph-platform/application-structure).\n\n## 2. **In Your Graph Code**\n\nWhen initializing your chat model in your graph code, specify both the API key and temperature:\n\n**Python:**\n```python\nfrom langchain_openai import ChatOpenAI\n\nllm = ChatOpenAI(\n    model=\"gpt-4o-mini\",\n    temperature=0.7,  # Your custom temperature\n    openai_api_key=\"your-api-key\"  # Or use os.environ.get(\"OPENAI_API_KEY\")\n)\n```\n\n**JavaScript:**\n```javascript\nimport { ChatOpenAI } from \"@langchain/openai\";\n\nconst llm = new ChatOpenAI({\n  model: \"gpt-4o-mini\",\n  temperature: 0.7,  // Your custom temperature\n  openAIApiKey: process.env.OPENAI_API_KEY\n});\n```\n\n## 3. **Runtime Configuration**\n\nYou can also pass configuration at runtime through the LangGraph SDK by including it in the `configurable` field when invoking your graph, allowing users to override default settings dynamically.\n\nThe key is to set the `OPENAI_API_KEY` environment variable and specify the `temperature` parameter when initializing your chat model within your graph definition.",
      "response_length": 1695,
      "chunk_count": 47,
      "error": null
    },
    {
      "question_id": "q3_moderate",
      "complexity": "moderate",
      "category": "Component integration",
      "question": "I want to build a chatbot that remembers previous messages across sessions. What components do I need and how do I connect them?",
      "success": true,
      "elapsed_time": 35.0806200504303,
      "elapsed_minutes": 0.584677000840505,
      "start_time": "2025-10-03T08:55:47.911712",
      "end_time": "2025-10-03T08:56:22.992332",
      "response_full": "# Building a Chatbot with Cross-Session Memory\n\nTo build a chatbot that remembers previous messages across sessions, you'll need these key components:\n\n## Core Components\n\n### 1. **Chat Model**\nYour LLM for generating responses (e.g., ChatOpenAI, ChatAnthropic)\n\n### 2. **Checkpointer (Persistence Layer)**\nThis stores conversation history across sessions. For production, use a database-backed checkpointer:\n\n- **[PostgresSaver](https://js.langchain.com/docs/integrations/memory/postgres)** - PostgreSQL database\n- **[Redis](https://js.langchain.com/docs/integrations/memory/redis)** - Redis instance\n- **[MongoDB](https://js.langchain.com/docs/integrations/memory/mongodb)** - MongoDB database\n- **[DynamoDB](https://js.langchain.com/docs/integrations/memory/dynamodb)** - AWS DynamoDB\n- **[Firestore](https://js.langchain.com/docs/integrations/memory/firestore)** - Google Firestore\n\n### 3. **LangGraph State Management**\nLangGraph with its built-in persistence to manage conversation state\n\n## How to Connect Them\n\nHere's a complete example using PostgreSQL:\n\n```typescript\nimport { ChatOpenAI } from \"@langchain/openai\";\nimport { StateGraph, MessagesAnnotation, START, END } from \"@langchain/langgraph\";\nimport { PostgresSaver } from \"@langchain/langgraph-checkpoint-postgres\";\n\n// 1. Set up the checkpointer\nconst DB_URI = \"postgresql://user:password@localhost:5432/chatbot\";\nconst checkpointer = PostgresSaver.fromConnString(DB_URI);\n// await checkpointer.setup(); // Run once on first setup\n\n// 2. Create your chat model\nconst model = new ChatOpenAI({ model: \"gpt-4\" });\n\n// 3. Define the conversation node\nconst callModel = async (state: typeof MessagesAnnotation.State) => {\n  const response = await model.invoke(state.messages);\n  return { messages: response };\n};\n\n// 4. Build the graph with persistence\nconst workflow = new StateGraph(MessagesAnnotation)\n  .addNode(\"model\", callModel)\n  .addEdge(START, \"model\")\n  .addEdge(\"model\", END);\n\nconst app = workflow.compile({ checkpointer });\n\n// 5. Use with thread IDs to maintain sessions\nawait app.invoke(\n  { messages: [{ role: \"user\", content: \"Hi, I'm Alice\" }] },\n  { configurable: { thread_id: \"user-123\" } }\n);\n\n// Later session - same thread_id retrieves history\nawait app.invoke(\n  { messages: [{ role: \"user\", content: \"What's my name?\" }] },\n  { configurable: { thread_id: \"user-123\" } }\n);\n```\n\n## Key Points\n\n- **Thread IDs**: Each conversation needs a unique `thread_id` passed in the config. This identifies which conversation history to load [(source)](https://js.langchain.com/docs/integrations/memory/postgres)\n- **Automatic History**: LangGraph automatically loads and saves message history when you provide a checkpointer [(source)](https://js.langchain.com/docs/how_to/chatbots_memory)\n- **Production Ready**: For production, always use a database-backed checkpointer instead of in-memory storage [(source)](https://docs.langchain.com/oss/javascript/langgraph/add-memory)\n\nThis approach gives you persistent memory across sessions without manually managing message history!",
      "response_length": 3054,
      "chunk_count": 73,
      "error": null
    },
    {
      "question_id": "q4_moderate_complex",
      "complexity": "moderate-complex",
      "category": "Debugging & resilience",
      "question": "My LangGraph agent keeps timing out after 30 seconds on complex questions. How can I debug this and make it more resilient?",
      "success": true,
      "elapsed_time": 39.13538312911987,
      "elapsed_minutes": 0.6522563854853313,
      "start_time": "2025-10-03T08:56:24.992894",
      "end_time": "2025-10-03T08:57:04.128276",
      "response_full": "# Debugging and Improving LangGraph Agent Timeout Issues\n\nHere are several strategies to debug and resolve timeout issues with your LangGraph agent:\n\n## 1. **Increase Recursion Limits**\n\nLangGraph has a default recursion limit that may be too low for complex questions. You can increase it when invoking your graph:\n\n```python\nfrom langgraph.prebuilt import create_react_agent\n\nagent = create_react_agent(model, tools=tools)\n\n# Increase recursion limit\nresult = await agent.invoke(\n    {\"messages\": [(\"human\", query)]},\n    {\"recursion_limit\": 50}  # Adjust based on your needs\n)\n```\n\n[The recursion limit controls how many steps your agent can take](https://python.langchain.com/docs/how_to/migrate_agent/). If reached, it will raise a `GraphRecursionError`.\n\n## 2. **Set Step-Level Timeouts**\n\nControl timeouts at the step level to prevent individual operations from hanging:\n\n```python\nfrom langgraph.prebuilt import create_react_agent\n\nagent = create_react_agent(model, tools=tools)\n# Set timeout for each step (in seconds)\nagent.step_timeout = 10  # Each step must complete within 10 seconds\n```\n\n[This prevents any single step from taking too long](https://python.langchain.com/docs/how_to/migrate_agent/).\n\n## 3. **Implement Overall Run Timeouts**\n\nFor total execution time control, use Python's `asyncio`:\n\n```python\nimport asyncio\n\nasync def run_with_timeout():\n    try:\n        task = asyncio.create_task(\n            agent.ainvoke({\"messages\": [(\"human\", query)]})\n        )\n        result = await asyncio.wait_for(task, timeout=60)  # 60 second total timeout\n        return result\n    except asyncio.TimeoutError:\n        print(\"Agent execution timed out\")\n        return None\n```\n\n## 4. **Enable Streaming for Better Observability**\n\n[Use streaming to monitor progress in real-time](https://docs.langchain.com/langgraph-platform/streaming):\n\n```python\nasync for chunk in agent.stream(\n    {\"messages\": [(\"human\", query)]},\n    {\"recursion_limit\": 50},\n    stream_mode=\"updates\"  # or \"values\", \"debug\"\n):\n    print(chunk)  # Monitor each step as it happens\n```\n\nAvailable stream modes:\n- **`updates`**: Shows state changes after each step\n- **`values`**: Shows full state after each step  \n- **`debug`**: [Provides detailed execution traces](https://docs.langchain.com/langgraph-platform/streaming)\n\n## 5. **Configure Server-Level Timeouts**\n\nIf deploying on [LangGraph Platform](https://docs.langchain.com/langgraph-platform/scalability-and-resilience), the infrastructure handles resilience automatically:\n\n- Failed runs are automatically retried up to 3 times\n- Instances use heartbeat monitoring to detect stalled runs\n- A sweeper task recovers in-progress runs every 2 minutes\n\n## 6. **Debug with Error Handling**\n\nCatch specific LangGraph errors to understand what's failing:\n\n```python\nfrom langgraph.errors import GraphRecursionError\n\ntry:\n    result = await agent.invoke(\n        {\"messages\": [(\"human\", query)]},\n        {\"recursion_limit\": 50}\n    )\nexcept GraphRecursionError:\n    print(\"Hit recursion limit - agent took too many steps\")\nexcept TimeoutError:\n    print(\"Operation timed out\")\n```\n\n## 7. **Use LangSmith for Deep Debugging**\n\n[LangGraph integrates with LangSmith](https://docs.langchain.com/oss/javascript/langgraph/overview) for visualization and tracing, which helps you:\n- Trace execution paths\n- Capture state transitions\n- View detailed runtime metrics\n- Identify bottlenecks\n\n## Recommended Approach\n\nStart with this configuration:\n\n```python\nagent = create_react_agent(model, tools=tools)\nagent.step_timeout = 15  # Prevent individual steps from hanging\n\n# Use streaming with increased limits\nasync for chunk in agent.stream(\n    {\"messages\": [(\"human\", query)]},\n    {\n        \"recursion_limit\": 50,  # Allow more steps for complex questions\n    },\n    stream_mode=\"debug\"  # Get detailed execution info\n):\n    print(chunk)\n```\n\nThis combination gives you visibility into what's happening while preventing indefinite hangs at both the step and overall execution level.",
      "response_length": 4016,
      "chunk_count": 94,
      "error": null
    },
    {
      "question_id": "q5_complex",
      "complexity": "complex",
      "category": "Multi-step architecture",
      "question": "I need to build a research assistant that: (1) breaks down complex questions into sub-questions, (2) searches documentation for each sub-question, (3) synthesizes findings. How should I structure this?",
      "success": true,
      "elapsed_time": 41.02429008483887,
      "elapsed_minutes": 0.6837381680806478,
      "start_time": "2025-10-03T08:57:06.129383",
      "end_time": "2025-10-03T08:57:47.153673",
      "response_full": "Based on the documentation, here's how you should structure your research assistant using **LangGraph**:\n\n## Recommended Architecture: Agentic RAG with Query Decomposition\n\n### 1. **Query Decomposition Component**\n\nUse an LLM with structured output to break down complex questions into sub-questions:\n\n```javascript\nimport { z } from \"zod\";\n\n// Define schema for sub-questions\nconst SubQuestions = z.object({\n  questions: z.array(z.string()).describe(\"List of sub-questions\")\n});\n\n// Create structured LLM\nconst structuredLlm = llm.withStructuredOutput(SubQuestions);\n\n// System prompt for decomposition\nconst system = `You are a helpful assistant that generates multiple sub-questions related to an input question.\nThe goal is to break down the input into a set of sub-problems that can be answered independently.`;\n```\n\n[Source](https://python.langchain.com/docs/concepts/retrieval/)\n\n### 2. **Retrieval for Each Sub-Question**\n\nCreate a retrieval tool that can be called for each sub-question:\n\n```javascript\nimport { tool } from \"@langchain/core/tools\";\n\nconst retrieveTool = tool(\n  async ({ query }) => {\n    // Your retrieval logic here\n    const docs = await retriever.invoke(query);\n    return docs;\n  },\n  {\n    name: \"retrieve_docs\",\n    description: \"Search documentation for relevant information\",\n    schema: z.object({ query: z.string() })\n  }\n);\n```\n\n### 3. **Build the Agent with LangGraph**\n\nUse LangGraph's **pre-built ReAct agent** to orchestrate the workflow:\n\n```javascript\nimport { createReactAgent } from \"@langgraph/prebuilt\";\n\nconst agent = createReactAgent({\n  llm,\n  tools: [retrieveTool],\n  checkpointer: memory  // For conversation history\n});\n```\n\n[Source](https://python.langchain.com/docs/how_to/qa_chat_history_how_to/)\n\n### 4. **Synthesis Node**\n\nAdd a final synthesis step in your graph to combine findings:\n\n```javascript\nimport { StateGraph, Annotation } from \"@langchain/langgraph\";\n\nconst StateAnnotation = Annotation.Root({\n  question: Annotation<string>,\n  subQuestions: Annotation<string[]>,\n  retrievedDocs: Annotation<Document[]>,\n  finalAnswer: Annotation<string>\n});\n\n// Add synthesis node\nasync function synthesize(state) {\n  const prompt = `Based on these findings: ${state.retrievedDocs}\n  Answer the original question: ${state.question}`;\n  \n  const response = await llm.invoke(prompt);\n  return { finalAnswer: response.content };\n}\n```\n\n## Complete Workflow Structure\n\nYour graph should follow this pattern:\n\n1. **Decompose** â Break question into sub-questions\n2. **Retrieve** â Search docs for each sub-question (parallel or sequential)\n3. **Synthesize** â Combine findings into final answer\n\n[Source](https://js.langchain.com/docs/tutorials/rag)\n\n## Key Benefits of This Approach\n\nâ¢ **Persistence**: LangGraph automatically manages state between steps [Source](https://js.langchain.com/docs/tutorials/rag)\nâ¢ **Streaming**: You can stream intermediate results as they're generated\nâ¢ **Flexibility**: The agent can decide how many retrieval steps to take [Source](https://python.langchain.com/docs/how_to/qa_chat_history_how_to/)\nâ¢ **Debugging**: Full observability through LangSmith tracing\n\n## Alternative: Chain-Based Approach\n\nIf you want more predictable behavior (exactly one query per sub-question), use a **chain instead of an agent**:\n\n```javascript\nconst chain = async (question) => {\n  // 1. Decompose\n  const subQuestions = await decomposer.invoke(question);\n  \n  // 2. Retrieve for each (parallel)\n  const docs = await Promise.all(\n    subQuestions.map(q => retriever.invoke(q))\n  );\n  \n  // 3. Synthesize\n  return await synthesizer.invoke({ question, docs });\n};\n```\n\n[Source](https://js.langchain.com/docs/tutorials/qa_chat_history)\n\nThe **agent approach is recommended** for research assistants as it provides more flexibility to iterate on queries and handle complex reasoning tasks. [Source](https://python.langchain.com/docs/how_to/qa_chat_history_how_to/)",
      "response_length": 3928,
      "chunk_count": 181,
      "error": null
    },
    {
      "question_id": "q6_ultra_complex",
      "complexity": "ultra-complex",
      "category": "Advanced graph with backtracking",
      "question": "I want to create a planning agent that explores multiple solution paths, can backtrack when hitting dead ends, and maintains a tree of attempted strategies. How do I implement this with LangGraph?",
      "success": true,
      "elapsed_time": 47.067513942718506,
      "elapsed_minutes": 0.7844585657119751,
      "start_time": "2025-10-03T08:57:49.154789",
      "end_time": "2025-10-03T08:58:36.222303",
      "response_full": "# Implementing a Tree-of-Thoughts Planning Agent with LangGraph\n\nTo create a planning agent that explores multiple solution paths with backtracking capabilities, you'll want to implement a **Tree of Thoughts (ToT)** pattern using LangGraph. Here's how to build it:\n\n## Core Architecture\n\n```python\nfrom langgraph.graph import StateGraph, START, END\nfrom typing import TypedDict, Annotated, Literal\nimport operator\n\nclass PlanningState(TypedDict):\n    task: str\n    current_path: Annotated[list[str], operator.add]  # Current exploration path\n    explored_paths: list[list[str]]  # All attempted paths\n    successful_paths: list[list[str]]  # Paths that succeeded\n    failed_paths: list[list[str]]  # Paths that hit dead ends\n    current_depth: int\n    max_depth: int\n    solution: str | None\n\ndef decompose_task(state: PlanningState):\n    \"\"\"Break down the current task into multiple possible next steps\"\"\"\n    # Use LLM to generate 2-3 possible approaches\n    possible_steps = llm.invoke(\n        f\"Generate 3 different approaches to solve: {state['task']}\\n\"\n        f\"Current path: {state['current_path']}\"\n    )\n    return {\"possible_steps\": possible_steps}\n\ndef evaluate_path(state: PlanningState):\n    \"\"\"Evaluate if current path is promising or a dead end\"\"\"\n    evaluation = llm.invoke(\n        f\"Evaluate this solution path: {state['current_path']}\\n\"\n        f\"Is this promising or a dead end? Rate 1-10.\"\n    )\n    return {\"path_score\": evaluation}\n\ndef should_backtrack(state: PlanningState) -> Literal[\"explore\", \"backtrack\", \"solution\"]:\n    \"\"\"Decide whether to continue, backtrack, or we found solution\"\"\"\n    if state.get(\"solution\"):\n        return \"solution\"\n    \n    if state[\"path_score\"] < 3 or state[\"current_depth\"] >= state[\"max_depth\"]:\n        return \"backtrack\"\n    \n    return \"explore\"\n\ndef backtrack(state: PlanningState):\n    \"\"\"Remove last step and mark path as explored\"\"\"\n    failed_path = state[\"current_path\"].copy()\n    return {\n        \"failed_paths\": state[\"failed_paths\"] + [failed_path],\n        \"current_path\": state[\"current_path\"][:-1],  # Pop last step\n        \"current_depth\": state[\"current_depth\"] - 1\n    }\n\n# Build the graph\nbuilder = StateGraph(PlanningState)\nbuilder.add_node(\"decompose\", decompose_task)\nbuilder.add_node(\"evaluate\", evaluate_path)\nbuilder.add_node(\"backtrack\", backtrack)\nbuilder.add_node(\"explore_step\", explore_next_step)\n\nbuilder.add_edge(START, \"decompose\")\nbuilder.add_edge(\"decompose\", \"evaluate\")\nbuilder.add_conditional_edges(\n    \"evaluate\",\n    should_backtrack,\n    {\n        \"explore\": \"explore_step\",\n        \"backtrack\": \"backtrack\",\n        \"solution\": END\n    }\n)\nbuilder.add_edge(\"backtrack\", \"decompose\")\nbuilder.add_edge(\"explore_step\", \"evaluate\")\n\ngraph = builder.compile()\n```\n\n## Using the Send API for Parallel Exploration\n\nFor exploring multiple paths simultaneously, use LangGraph's **Send API** [(docs)](https://docs.langchain.com/oss/python/langgraph/use-graph-api):\n\n```python\nfrom langgraph.types import Send\n\ndef fan_out_paths(state: PlanningState):\n    \"\"\"Explore multiple solution branches in parallel\"\"\"\n    possible_approaches = [\"approach_1\", \"approach_2\", \"approach_3\"]\n    \n    # Send each approach to be explored independently\n    return [\n        Send(\"explore_branch\", {\"branch\": approach, \"parent_path\": state[\"current_path\"]})\n        for approach in possible_approaches\n    ]\n\nbuilder.add_conditional_edges(\"decompose\", fan_out_paths, [\"explore_branch\"])\n```\n\n## Key Implementation Details\n\n### 1. **State Management for Tree Structure**\n```python\nclass TreeNode(TypedDict):\n    step: str\n    children: list[TreeNode]\n    score: float\n    is_dead_end: bool\n\nclass PlanningState(TypedDict):\n    tree: TreeNode  # Maintain full tree structure\n    current_node: TreeNode  # Pointer to current position\n```\n\n### 2. **Recursion Limit**\nSet an appropriate recursion limit to prevent infinite loops [(docs)](https://docs.langchain.com/oss/javascript/langgraph/GRAPH_RECURSION_LIMIT):\n\n```python\nresult = graph.invoke(\n    {\"task\": \"Your complex task\", \"max_depth\": 5},\n    {\"recursionLimit\": 50}\n)\n```\n\n### 3. **Checkpointing for State Persistence**\nEnable checkpointing to save exploration state [(docs)](https://docs.langchain.com/oss/python/langgraph/MULTIPLE_SUBGRAPHS):\n\n```python\nfrom langgraph.checkpoint.memory import MemorySaver\n\nmemory = MemorySaver()\ngraph = builder.compile(checkpointer=memory)\n```\n\n## Search Strategies\n\nImplement different search patterns:\n\n**Breadth-First Search (BFS)**:\n```python\ndef select_next_path(state: PlanningState):\n    # Explore all paths at current depth before going deeper\n    return min(state[\"unexplored_paths\"], key=lambda p: len(p))\n```\n\n**Depth-First Search (DFS)**:\n```python\ndef select_next_path(state: PlanningState):\n    # Explore deepest path first\n    return max(state[\"unexplored_paths\"], key=lambda p: len(p))\n```\n\n## Complete Example\n\n```python\n# Initialize and run\ninitial_state = {\n    \"task\": \"Design a scalable microservices architecture\",\n    \"current_path\": [],\n    \"explored_paths\": [],\n    \"successful_paths\": [],\n    \"failed_paths\": [],\n    \"current_depth\": 0,\n    \"max_depth\": 4,\n    \"solution\": None\n}\n\nfor step in graph.stream(initial_state, {\"recursionLimit\": 100}):\n    print(f\"Step: {step}\")\n    \n# Access final result\nprint(f\"Successful paths: {step['successful_paths']}\")\nprint(f\"Failed attempts: {step['failed_paths']}\")\n```\n\nThis implementation gives you a robust planning agent that can explore multiple solution strategies, evaluate their viability, backtrack from dead ends, and maintain a complete history of attempted approachesâexactly as described in the Tree of Thoughts methodology [(source)](https://js.langchain.com/docs/tutorials/rag).",
      "response_length": 5734,
      "chunk_count": 151,
      "error": null
    }
  ]
}